receiver,call target,reason if incomplete

core::result::Result,core::ops::try_trait::Try::branch,
core::result::Result,core::ops::try_trait::FromResidual::from_residual,
core::option::Option,core::ops::try_trait::Try::branch,
core::option::Option,core::ops::try_trait::FromResidual::from_residual,

*,core::clone::Clone::clone,

# categorizing all these as the same so we can specifically investigate this subset
# specifying behavior for specific generics is not really possible in this format
*,core::convert::From::from,convert
*,core::convert::Into::into,convert
*,core::default::Default::default,default

# impl Option
,core::option::Option<T>::is_some,
,core::option::Option<T>::is_none,
,core::option::Option<T>::as_ref,refs
,core::option::Option<T>::as_mut,refs
,core::option::Option<T>::as_pin_ref,refs
,core::option::Option<T>::as_pin_mut,refs
,core::option::Option<T>::expect,
,core::option::Option<T>::unwrap,
,core::option::Option<T>::unwrap_or,
,core::option::Option<T>::unwrap_or_else,calls
,core::option::Option<T>::unwrap_or_default,calls
,core::option::Option<T>::unwrap_unchecked,
,core::option::Option<T>::map,calls
,core::option::Option<T>::map_or,calls
,core::option::Option<T>::map_or_else,calls
,core::option::Option<T>::ok_or,
,core::option::Option<T>::ok_or_else,calls
,core::option::Option<T>::as_deref,"refs, calls"
,core::option::Option<T>::as_deref_mut,"refs, calls"
,core::option::Option<T>::and,
,core::option::Option<T>::and_then,calls
,core::option::Option<T>::filter,calls
,core::option::Option<T>::or,
,core::option::Option<T>::or_else,calls
,core::option::Option<T>::xor,
,core::option::Option<T>::insert,
,core::option::Option<T>::get_or_insert,
,core::option::Option<T>::get_or_insert_with,calls
,core::option::Option<T>::take,
,core::option::Option<T>::replace,
,core::option::Option<T>::zip,
,core::option::Option<core::option::Option<T>>::flatten,
,"core::option::Option<core::result::Result<T, E>>::transpose",

# impl Result
,"core::result::Result<T, E>::is_ok",
,"core::result::Result<T, E>::is_err",
,"core::result::Result<T, E>::ok",
,"core::result::Result<T, E>::err",
,"core::result::Result<T, E>::as_ref",refs
,"core::result::Result<T, E>::as_mut",refs
,"core::result::Result<T, E>::map",calls
,"core::result::Result<T, E>::map_or",calls
,"core::result::Result<T, E>::map_or_else",calls
,"core::result::Result<T, E>::map_err",calls
,"core::result::Result<T, E>::as_deref","refs, calls"
,"core::result::Result<T, E>::as_deref_mut","refs, calls"
,"core::result::Result<T, E>::expect",
,"core::result::Result<T, E>::unwrap",
,"core::result::Result<T, E>::unwrap_or_default",calls
,"core::result::Result<T, E>::expect_err",
,"core::result::Result<T, E>::unwrap_err",
,"core::result::Result<T, E>::and",
,"core::result::Result<T, E>::and_then",calls
,"core::result::Result<T, E>::or",
,"core::result::Result<T, E>::or_else",calls
,"core::result::Result<T, E>::unwrap_or",
,"core::result::Result<T, E>::unwrap_or_else",calls
,"core::result::Result<T, E>::unwrap_unchecked",
,"core::result::Result<T, E>::unwrap_err_unchecked",
,"core::result::Result<core::option::Option<T>, E>::transpose",

# strings
alloc::string::String,alloc::string::ToString::to_string,
# best handled by a holistic approach to strings
str,core::cmp::PartialEq::eq,strings
&str,core::cmp::PartialEq::eq,strings
,alloc::string::String::push_str,strings
,alloc::string::String::new,strings
,str::parse,strings
,str::len,strings

# synthesized by a semi-popular crate
,libsecp256k1_core::field::FieldStorage::new,synthesized
,libsecp256k1_core::group::AffineStorage::new,synthesized

# special handling by prusti
,[T]::len,builtin
,core::panicking::panic,builtin
,core::panicking::assert_failed,builtin
,std::panicking::begin_panic,builtin
,core::panicking::panic_fmt,builtin

# blocked by issue #1221
*,core::ops::deref::Deref::deref,issue_1221
*,core::ops::index::Index::index,issue_1221
str,alloc::borrow::ToOwned::to_owned,issue_1221
str,alloc::string::ToString::to_string,issue_1221
,alloc::string::String::as_str,issue_1221
,alloc::boxed::Box<T>::new,issue_1221
,"std::collections::hash::map::HashMap<K, V, S>::insert",issue_1221

# requires handling interior mutability (Arc, Pin, etc.)
alloc::sync::Arc,core::ops::deref::Deref::deref,interior_mutability
,alloc::sync::Arc<T>::new,interior_mutability
,core::pin::Pin<P>::new_unchecked,interior_mutability
,core::pin::Pin<P>::as_mut,interior_mutability
,core::pin::Pin<&T>::get_unchecked_mut,interior_mutability
core::pin::Pin,core::ops::deref::DerefMut::deref_mut,interior_mutability

# best handled by a holistic approach to async
,core::future::get_context,async
,core::future::from_generator,async
*,core::future::future::Future::poll,async
*,core::future::into_future::IntoFuture::into_future,async

# string formatting for logging (either people like to call these manually or macro detection doesn't always work right)
*,core::fmt::Debug::fmt,formatting
*,core::fmt::Display::fmt,formatting
,alloc::fmt::format,formatting
,core::fmt::Formatter::write_str,formatting
,core::fmt::Formatter::write_fmt,formatting
,core::fmt::Formatter::debug_struct,formatting
,core::fmt::Formatter::debug_struct_field1_finish,formatting
,core::fmt::Formatter::debug_struct_field2_finish,formatting
,core::fmt::Formatter::debug_struct_field3_finish,formatting
,core::fmt::Formatter::debug_struct_field4_finish,formatting
,core::fmt::Formatter::debug_struct_field5_finish,formatting
,core::fmt::Formatter::debug_struct_fields_finish,formatting
,core::fmt::Formatter::debug_tuple,formatting
,core::fmt::Formatter::debug_tuple_field1_finish,formatting
,core::fmt::Formatter::debug_tuple_field2_finish,formatting
,core::fmt::Formatter::debug_tuple_field3_finish,formatting
,core::fmt::Formatter::debug_list,formatting
,core::fmt::Formatter::debug_map,formatting
,core::fmt::Formatter::debug_set,formatting
,core::fmt::Formatter::pad,formatting
,core::fmt::Formatter::pad_integral,formatting
,core::fmt::Formatter::alternate,formatting
,core::fmt::Formatter::precision,formatting
,core::fmt::Formatter::sign_plus,formatting
,core::fmt::Arguments::new_v1,formatting
,core::fmt::Arguments::new_v1_formatted,formatting
,core::fmt::ArgumentV1::new_display,formatting
,core::fmt::ArgumentV1::new_debug,formatting
,core::fmt::ArgumentV1::new_lower_hex,formatting
,core::fmt::ArgumentV1::new_upper_hex,formatting
,core::fmt::ArgumentV1::from_usize,formatting
,core::fmt::ArgumentV1::new_binary,formatting
,core::fmt::ArgumentV1::new_pointer,formatting
,core::fmt::ArgumentV1::new_octal,formatting
,core::fmt::ArgumentV1::new_lower_exp,formatting
,core::fmt::ArgumentV1::new_upper_exp,formatting
,core::fmt::builders::DebugStruct::field,formatting
,core::fmt::builders::DebugStruct::finish,formatting
,core::fmt::builders::DebugStruct::finish_non_exhaustive,formatting
,core::fmt::builders::DebugTuple::field,formatting
,core::fmt::builders::DebugTuple::finish,formatting
,core::fmt::builders::DebugList::finish,formatting
,core::fmt::builders::DebugList::entries,formatting
,core::fmt::builders::DebugList::entry,formatting
,core::fmt::builders::DebugMap::finish,formatting
,core::fmt::builders::DebugMap::entry,formatting
,core::fmt::builders::DebugMap::entries,formatting
,core::fmt::builders::DebugSet::finish,formatting
,core::fmt::builders::DebugSet::entries,formatting

# best handled once we figure out the story for iterators
,[T]::iter,iterators
,[T]::iter_mut,iterators
*,core::iter::traits::collect::IntoIterator::into_iter,iterators
*,core::iter::traits::collect::FromIterator::from_iter,iterators
*,core::iter::traits::collect::Extend::extend,iterators
*,core::iter::traits::iterator::Iterator::next,iterators
*,core::iter::traits::iterator::Iterator::for_each,iterators
*,core::iter::traits::iterator::Iterator::collect,iterators
*,core::iter::traits::iterator::Iterator::map,iterators
*,core::iter::traits::iterator::Iterator::filter,iterators
*,core::iter::traits::iterator::Iterator::filter_map,iterators
*,core::iter::traits::iterator::Iterator::flat_map,iterators
*,core::iter::traits::iterator::Iterator::find_map,iterators
*,core::iter::traits::iterator::Iterator::any,iterators
*,core::iter::traits::iterator::Iterator::all,iterators
*,core::iter::traits::iterator::Iterator::zip,iterators
*,core::iter::traits::iterator::Iterator::enumerate,iterators
*,core::iter::traits::iterator::Iterator::find,iterators
*,core::iter::traits::iterator::Iterator::position,iterators
*,core::iter::traits::iterator::Iterator::peekable,iterators
*,core::iter::traits::iterator::Iterator::rev,iterators
*,core::iter::traits::iterator::Iterator::skip,iterators
*,core::iter::traits::iterator::Iterator::take,iterators
*,core::iter::traits::iterator::Iterator::nth,iterators
*,core::iter::traits::iterator::Iterator::last,iterators
*,core::iter::traits::iterator::Iterator::count,iterators
*,core::iter::traits::iterator::Iterator::chain,iterators
*,core::iter::traits::iterator::Iterator::fold,iterators
*,core::iter::traits::iterator::Iterator::sum,iterators
*,core::iter::traits::iterator::Iterator::cloned,iterators
*,core::iter::traits::iterator::Iterator::copied,iterators
*,core::iter::traits::iterator::Iterator::flatten,iterators
*,core::iter::traits::iterator::Iterator::step_by,iterators
*,core::iter::traits::iterator::Iterator::min,iterators
*,core::iter::traits::iterator::Iterator::max,iterators

# slices/vecs
alloc::vec::Vec,core::ops::deref::Deref::deref,issue_1221
alloc::vec::Vec,core::ops::deref::DerefMut::deref_mut,issue_1221
,alloc::vec::Vec<T>::new,
,alloc::vec::Vec<T>::with_capacity,
,"alloc::vec::Vec<T, A>::push",issue_1221
,"alloc::vec::Vec<T, A>::len",issue_1221
alloc::vec::Vec,core::ops::index::Index::index,issue_1221
alloc::vec::Vec,core::ops::index::IndexMut::index_mut,issue_1221
alloc::vec::Vec,core::cmp::PartialEq::eq,issue_1221
alloc::vec::Vec,core::iter::traits::collect::Extend::extend,issue_1221

# define sizes for common types
,core::mem::size_of,
,core::mem::align_of,
,core::mem::swap,

# unlikely to be ever specified
,core::intrinsics::foreign::transmute,transmutation

# best handled holistically together with call descriptions
*,core::ops::function::Fn::call,calls
*,core::ops::function::FnMut::call_mut,calls
*,core::ops::function::FnOnce::call_once,calls
